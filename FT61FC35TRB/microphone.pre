
# 1 "microphone.c"

# 4 "C:\Program Files (x86)\CCompiler\Compiler\data\include\__size_t.h"
typedef unsigned size_t;

# 7 "C:\Program Files (x86)\CCompiler\Compiler\data\include\stdlib.h"
typedef unsigned short wchar_t;

# 15
typedef struct {
int rem;
int quot;
} div_t;
typedef struct {
unsigned rem;
unsigned quot;
} udiv_t;
typedef struct {
long quot;
long rem;
} ldiv_t;
typedef struct {
unsigned long quot;
unsigned long rem;
} uldiv_t;

# 53
extern double atof(const char *);
extern double strtod(const char *, const char **);
extern int atoi(const char *);
extern unsigned xtoi(const char *);
extern long atol(const char *);
extern long strtol(const char *, char **, int);

extern int rand(void);
extern void srand(unsigned int);
extern void * calloc(size_t, size_t);
extern div_t div(int numer, int denom);
extern udiv_t udiv(unsigned numer, unsigned denom);
extern ldiv_t ldiv(long numer, long denom);
extern uldiv_t uldiv(unsigned long numer,unsigned long denom);
extern unsigned long _lrotl(unsigned long value, unsigned int shift);
extern unsigned long _lrotr(unsigned long value, unsigned int shift);
extern unsigned int _rotl(unsigned int value, unsigned int shift);
extern unsigned int _rotr(unsigned int value, unsigned int shift);




extern void * malloc(size_t);
extern void free(void *);
extern void * realloc(void *, size_t);


# 13 "C:\Program Files (x86)\CCompiler\Compiler\data\include\gcc8debug.h"
#pragma intrinsic(__builtin_software_breakpoint)
extern void __builtin_software_breakpoint(void);

# 86 "C:\Program Files (x86)\CCompiler\Compiler\data\include\stdlib.h"
extern int atexit(void (*)(void));
extern char * getenv(const char *);
extern char ** environ;
extern int system(char *);
extern void qsort(void *, size_t, size_t, int (*)(const void *, const void *));
extern void * bsearch(const void *, void *, size_t, size_t, int(*)(const void *, const void *));
extern int abs(int);
extern long labs(long);

extern char * itoa(char * buf, int val, int base);
extern char * utoa(char * buf, unsigned val, int base);




extern char * ltoa(char * buf, long val, int base);
extern char * ultoa(char * buf, unsigned long val, int base);

extern char * ftoa(float f, int * status);

# 13 "C:\Program Files (x86)\CCompiler\Compiler\data\include\stdint.h"
typedef signed char int8_t;

# 20
typedef signed int int16_t;

# 28
typedef signed short long int int24_t;

# 36
typedef signed long int int32_t;

# 43
typedef unsigned char uint8_t;

# 49
typedef unsigned int uint16_t;

# 56
typedef unsigned short long int uint24_t;

# 63
typedef unsigned long int uint32_t;

# 71
typedef signed char int_least8_t;

# 78
typedef signed int int_least16_t;

# 90
typedef signed short long int int_least24_t;

# 98
typedef signed long int int_least32_t;

# 105
typedef unsigned char uint_least8_t;

# 111
typedef unsigned int uint_least16_t;

# 121
typedef unsigned short long int uint_least24_t;

# 128
typedef unsigned long int uint_least32_t;

# 137
typedef signed char int_fast8_t;

# 144
typedef signed int int_fast16_t;

# 156
typedef signed short long int int_fast24_t;

# 164
typedef signed long int int_fast32_t;

# 171
typedef unsigned char uint_fast8_t;

# 177
typedef unsigned int uint_fast16_t;

# 187
typedef unsigned short long int uint_fast24_t;

# 194
typedef unsigned long int uint_fast32_t;

# 200
typedef int32_t intmax_t;




typedef uint32_t uintmax_t;




typedef int16_t intptr_t;




typedef uint16_t uintptr_t;

# 12 "C:\Program Files (x86)\CCompiler\Compiler\data\include\stdbool.h"
typedef unsigned char bool;

# 27 "FT61FC35TRB_CONFIG.H"
typedef unsigned char u8;
typedef char s8;
typedef unsigned short u16;
typedef signed short s16;
typedef unsigned int u32;
typedef signed int s32;
typedef unsigned long long u64;
typedef u32 FOURCC;
typedef long long s64;
typedef unsigned long long u64;

# 37 "FT61FC3x_IIC.H"
void IIC_INITIAL(void);

void DelayUs(unsigned char Time);

unsigned char IIC_READ(unsigned char i2c_address, unsigned char reg);

void IIC_WRITE(unsigned char i2c_address, unsigned char reg,unsigned char data);

void IIC_READ_MULTI(unsigned char i2c_address, unsigned char reg, unsigned char *pData, unsigned int length);

void IIC_WRITE_MULTI(unsigned char i2c_address, unsigned char reg, unsigned char *pData, unsigned int length);

# 343 "KT0646M.h"
u16 KT_WirelessMicTx_PreInit(void);
bool KT_Test_Init(void);
bool KT_WirelessMicTx_Init(void);

bool KT_WirelessMicTx_Standby(void);
bool KT_WirelessMicTx_WakeUp(void);
void KT_WirelessMicTx_PowerDownProcedure(void);

bool KT_WirelessMicTx_PASW(bool bPA_Switch);
bool KT_WirelessMicTx_PAGain(u8 cPaGain);

u8 KT_WirelessMicTx_Fdev_Monitor(void);
bool KT_WirelessMicTx_Mic_Sens(u8 cMicSens);
bool KT_WirelessMicTx_Comp_Dis(bool bComp_Dis);
bool KT_WirelessMicTx_Comp_TC(u8 cComp_TC);
bool KT_WirelessMicTx_MuteSel(bool bMute_Sel);

bool KT_WirelessMicTx_Pilot(bool bPilot_Dis);
bool KT_WirelessMicTx_Pilot_Fdev(u8 cPilot_Fdev);

# 367
bool KT_WirelessMicTx_Tune(s32 Freq);

u8 KT_WirelessMicTx_Band_Cali_Res(void);
u8 KT_WirelessMicTx_Set_XTAL(bool bXtal_Sel);
u8 KT_WirelessMicTx_SW_XTAL_Freq(bool bXtal_Sel);

void Delay_ms(u16 iTime_Number);
void KT_Bus_Write(u8 Register_Address, u16 Word_Data);
u16 KT_Bus_Read(u8 Register_Address);

void KT_WirelessMicTx_ECHO(bool bEcho_Dis,u8 Echo_Ratio,u8 Echo_Delay);
void KT_WirelessMicTx_EQSW(bool bEq_Dis);
void KT_WirelessMicTx_EQGAIN(u8 Eq_Freq,u8 Eq_Gain);
u16 KT_WirelessMicTx_BatteryMeter_Read(void);
bool KT_WirelessMicTx_BatteryMeter_SW(bool bBatteryMeter_En);
u8 KT_WirelessMicTx_Read_Mic_Sens(void);
bool KT_WirelessMicTx_Mic_Sens(u8 cMicSens);
void KT_WirelessMicTx_COMPANDOR_Dis(bool COMP_Dis);

int host_iic_send_data(u8 id, u8 reg, u8 *data, u16 len);
int host_iic_read_data(u8 id, u8 reg, u8 *data, u16 len);

# 31 "microphone.h"
typedef struct
{
u32 flash_key;
s32 freq;

u8 PA_gain;

u8 EQ_EN;
u8 EQ[15];

u8 PILOT_EN;
u16 PILOT_DATA[4];
u8 channel;
u8 PA_state;
u8 ch_power_count;
}mic_config_t;

typedef struct
{
u8 cmd;
u8 len;
u8 cmd_data[64];
}microphone_setting_t;

typedef struct
{
u16 channel;
u32 freq;
}microphone_status_t;

extern mic_config_t mic_config;

extern u32 tick_microphone_new_cmd;
extern microphone_setting_t microphone_setting;



int microphone_init();

bool KT_MicTX_Init(void);

int microphone_set_freq();

void process_microphone();

int microphone_set_PA0();

void microphone_enable(bool enable);
int microphone_pairing(s32 Freq,u8 ch);
void microphone_AUX_Disconnect();
void microphone_AUX_mute();
void microphone_AUX_unmute();
void KT_mic_config_t_print(mic_config_t mic_config);
void KT0646_setchangeBattery();
void KT0646_setchangekey(u8 key);

# 343 "KT0646M.h"
u16 KT_WirelessMicTx_PreInit(void);
bool KT_Test_Init(void);
bool KT_WirelessMicTx_Init(void);

bool KT_WirelessMicTx_Standby(void);
bool KT_WirelessMicTx_WakeUp(void);
void KT_WirelessMicTx_PowerDownProcedure(void);

bool KT_WirelessMicTx_PASW(bool bPA_Switch);
bool KT_WirelessMicTx_PAGain(u8 cPaGain);

u8 KT_WirelessMicTx_Fdev_Monitor(void);
bool KT_WirelessMicTx_Mic_Sens(u8 cMicSens);
bool KT_WirelessMicTx_Comp_Dis(bool bComp_Dis);
bool KT_WirelessMicTx_Comp_TC(u8 cComp_TC);
bool KT_WirelessMicTx_MuteSel(bool bMute_Sel);

bool KT_WirelessMicTx_Pilot(bool bPilot_Dis);
bool KT_WirelessMicTx_Pilot_Fdev(u8 cPilot_Fdev);

# 367
bool KT_WirelessMicTx_Tune(s32 Freq);

u8 KT_WirelessMicTx_Band_Cali_Res(void);
u8 KT_WirelessMicTx_Set_XTAL(bool bXtal_Sel);
u8 KT_WirelessMicTx_SW_XTAL_Freq(bool bXtal_Sel);

void Delay_ms(u16 iTime_Number);
void KT_Bus_Write(u8 Register_Address, u16 Word_Data);
u16 KT_Bus_Read(u8 Register_Address);

void KT_WirelessMicTx_ECHO(bool bEcho_Dis,u8 Echo_Ratio,u8 Echo_Delay);
void KT_WirelessMicTx_EQSW(bool bEq_Dis);
void KT_WirelessMicTx_EQGAIN(u8 Eq_Freq,u8 Eq_Gain);
u16 KT_WirelessMicTx_BatteryMeter_Read(void);
bool KT_WirelessMicTx_BatteryMeter_SW(bool bBatteryMeter_En);
u8 KT_WirelessMicTx_Read_Mic_Sens(void);
bool KT_WirelessMicTx_Mic_Sens(u8 cMicSens);
void KT_WirelessMicTx_COMPANDOR_Dis(bool COMP_Dis);

int host_iic_send_data(u8 id, u8 reg, u8 *data, u16 len);
int host_iic_read_data(u8 id, u8 reg, u8 *data, u16 len);

# 7 "microphone.c"
mic_config_t mic_config = {0};
mic_config_t current_mic_config = {0};
u16 microphone_pairing_flag =0;
u8 channel_number = 0;

microphone_setting_t microphone_setting = {0};
extern bool err_remote_pa_off;
extern u32 Battery_Vdet;

extern void delay_10ms(u32 tick);
extern void DelayUs();
extern uint8_t TestMode;

# 150
const uint32_t UserRandomFreq[2][48] =
{
{


657027,
657427,
657827,
658227,
658627,
659027,
},

{



659427,
659827,
660227,
660627,
661027,
661427,
}

};

const u8 EQ_param_default[15] = {

4,
5,
6,
9,
12,
12,
12,
12,
12,
12,
12,
12,
12,
12,
12,
};

# 201
int microphone_init()
{
log_info("KT0646M init\r\n");

if (mic_config.flash_key != 0x55AA0103)
{
mic_config.freq = 607250;

mic_config.PA_gain = 20;


mic_config.PILOT_EN = 1;
mic_config.PILOT_DATA[0]= 0xA700;
mic_config.PILOT_DATA[1] = 0xf0e4;
mic_config.PILOT_DATA[2] = 0x4161;
mic_config.PILOT_DATA[3] = 0x4d66;

}

mic_config.EQ_EN = 0;
for (int i = 0; i < 15; i++) {
mic_config.EQ[i] = 12;
}


int i;
for (i = 0; i < 3; i++) {

# 238
u16 ID_KT0646M = KT_WirelessMicTx_PreInit();
if (ID_KT0646M != 0) {
log_info("Successed Read KT0646M ID = 0x%04x\r\n", ID_KT0646M);
} else {
log_info("Failed Read KT0646M ID\r\n");
return 0;
}

if (KT_WirelessMicTx_Init() == 0) {
log_info("KT0646M init Failed\r\n");
}
else {
log_info("KT0646M init Successed\r\n");
}


if (KT_MicTX_Init() == 0) {
log_info("FM started, freq=%dKHz, PA gain=%d\r\n, retry = %d", mic_config.freq,mic_config.PA_gain, i);
} else {
break;
}
}

if (i == 3) {
return 0;
} else {
return 1;
}
}

# 281
bool KT_MicTX_Init(void)
{


if (KT_WirelessMicTx_Tune(607250) == 0) {
return 0;
}
else{
log_info("33333333 KT_MicTX_Init mic_config.freq =[607250KHZ]\r\n");
}

KT_WirelessMicTx_EQGAIN(0, mic_config.EQ[0]);
KT_WirelessMicTx_EQGAIN(1, mic_config.EQ[1]);
KT_WirelessMicTx_EQGAIN(2, mic_config.EQ[2]);

KT_WirelessMicTx_EQGAIN(3,mic_config.EQ[3]);
KT_WirelessMicTx_EQGAIN(4,mic_config.EQ[4]);
KT_WirelessMicTx_EQGAIN(5,mic_config.EQ[5]);

KT_WirelessMicTx_EQGAIN(6,mic_config.EQ[6]);
KT_WirelessMicTx_EQGAIN(7,mic_config.EQ[7]);
KT_WirelessMicTx_EQGAIN(8, mic_config.EQ[8]);

KT_WirelessMicTx_EQGAIN(9, mic_config.EQ[9]);
KT_WirelessMicTx_EQGAIN(10, mic_config.EQ[10]);
KT_WirelessMicTx_EQGAIN(11, mic_config.EQ[11]);

KT_WirelessMicTx_EQGAIN(12, mic_config.EQ[12]);
KT_WirelessMicTx_EQGAIN(13, mic_config.EQ[13]);
KT_WirelessMicTx_EQGAIN(14, mic_config.EQ[14]);


KT_WirelessMicTx_EQSW(mic_config.EQ_EN);
KT_WirelessMicTx_ECHO(1,0,0);
DelayUs(200*1000);


KT_WirelessMicTx_PAGain(mic_config.PA_gain);


KT_Bus_Write(0x12, mic_config.PILOT_DATA[0]);
KT_Bus_Write(0x13, mic_config.PILOT_DATA[1]);
KT_Bus_Write(0x14, mic_config.PILOT_DATA[2]);
KT_Bus_Write(0x27, mic_config.PILOT_DATA[3]);


KT_WirelessMicTx_Pilot(mic_config.PILOT_EN);

return 1;
}


int microphone_set_freq()
{
int result = 0;

u16 pilot_config = KT_Bus_Read(0x1F);

KT_WirelessMicTx_MuteSel(1);
KT_WirelessMicTx_Pilot(0);
KT_WirelessMicTx_PAGain(0);
KT_WirelessMicTx_PASW(0);
DelayUs(10*1000);

# 370
int retry = 3;
do {

KT_WirelessMicTx_Init();

if (KT_MicTX_Init() == 1) {
KT_WirelessMicTx_PAGain(mic_config.PA_gain);
KT_WirelessMicTx_PASW(1);

KT_Bus_Write(0x12, mic_config.PILOT_DATA[0]);
KT_Bus_Write(0x13, mic_config.PILOT_DATA[1]);
KT_Bus_Write(0x14, mic_config.PILOT_DATA[2]);
KT_Bus_Write(0x27, mic_config.PILOT_DATA[3]);
KT_WirelessMicTx_Pilot(1);
KT_Bus_Write(0x1F, pilot_config);


pilot_config = KT_Bus_Read(0x1e);
KT_Bus_Write(0x1e,pilot_config|0x0010);
DelayUs(5*1000);
pilot_config = KT_Bus_Read(0x1e);
KT_Bus_Write(0x1e, pilot_config&~0x0010);

KT_WirelessMicTx_MuteSel(0);
log_info("set new freq = %dKHz, result = %d\n",mic_config.freq, result);

return 1;
}

microphone_enable(0);
DelayUs(100*1000);
microphone_enable(1);
DelayUs(300*1000);
}while(retry--);

log_info("microphone_set_freq failed!");
return 0;
}

int microphone_save_config()
{

mic_config.flash_key = 0x55AA0103;


return 1;
}


void microphone_AUX_Disconnect()
{
u16 device_id_reg13 =0;
u16 ret =0;
ret = KT_Bus_Read(0x1f);
log_info("read  aux_addr2 reg1f=[0x%04x]  \r\n",ret);
ret = KT_Bus_Read(0x1f);
log_info("read  aux_addr2 reg1f=[0x%04x]  \r\n",ret);
log_info("read  aux_addr2 reg2H =[0x%02x  0x02x ]  \r\n",(((ret) >> 8) & 0xFF),((ret) & 0xFF));
device_id_reg13 = (0xe2 << 8) | (((ret) & 0xFF));



KT_Bus_Write(0x13, device_id_reg13);

KT_Bus_Write(0x20,(0x13 << 8) | 0x12);
KT_Bus_Write(0x21,(0x27 << 8) | 0x14);

ret = KT_Bus_Read(0x1f);
KT_Bus_Write(0x1f,(ret&0x80f0)|(1 << 14)|(3 << 12) |
(3 << 9)|1);
}



void microphone_AUX_mute()
{
u16 device_id_reg13 =0;
u16 ret =0;
ret = KT_Bus_Read(0x1f);
log_debug("read  aux_addr1f reg1f=[0x%04x]  \r\n",ret);
ret = KT_Bus_Read(0x13);
log_debug("read  aux_addr13 reg1f=[0x%04x]  \r\n",ret);

device_id_reg13 = (0xe3 << 8) | (((ret) & 0xFF));

KT_Bus_Write(0x13, device_id_reg13);

ret = KT_Bus_Read(0x27);
ret = KT_Bus_Read(0x13);
log_debug("write  aux_addr13 reg14=[0x%04x]  \r\n",ret);

KT_Bus_Write(0x20,(0x13 << 8) | 0x12);
KT_Bus_Write(0x21,(0x27 << 8) | 0x14);

ret = KT_Bus_Read(0x1f);
KT_Bus_Write(0x1f,(ret&0x80f0)|(1 << 14)|(3 << 12) |
(3 << 9)|1);
}


void microphone_AUX_unmute()
{
u16 device_id_reg13 =0;
u16 ret =0;
ret = KT_Bus_Read(0x1f);
log_debug("read  aux_addr1f reg1f=[0x%04x]  \r\n",ret);
ret = KT_Bus_Read(0x13);
log_debug("read  aux_addr13 reg1f=[0x%04x]  \r\n",ret);

device_id_reg13 = (0xe4 << 8) | (((ret) & 0xFF));

KT_Bus_Write(0x13, device_id_reg13);

ret = KT_Bus_Read(0x27);
ret = KT_Bus_Read(0x13);
log_debug("write  aux_addr14 reg14=[0x%04x]  \r\n",ret);

KT_Bus_Write(0x20,(0x13 << 8) | 0x12);
KT_Bus_Write(0x21,(0x27 << 8) | 0x14);

ret = KT_Bus_Read(0x1f);
KT_Bus_Write(0x1f,(ret&0x80f0)|(1 << 14)|(3 << 12) |
(3 << 9)|1);
}


int microphone_pairing(s32 Freq,u8 ch)
{
u16 pilot_config = KT_Bus_Read(0x1F);

KT_WirelessMicTx_MuteSel(1);
KT_WirelessMicTx_Pilot(0);
KT_WirelessMicTx_PAGain(0);
KT_WirelessMicTx_PASW(0);

# 511
int retry = 3;
do {



if (KT_WirelessMicTx_Tune(Freq) == 1) {
KT_WirelessMicTx_PAGain(mic_config.PA_gain);


u16 p0 = ((u16)0xA9 << 8) + ch-1;
KT_Bus_Write(0x12, p0);
KT_Bus_Write(0x13, 0xf0e4);
KT_Bus_Write(0x14, 0x4161);
KT_Bus_Write(0x27, 0x4d66);
KT_WirelessMicTx_Pilot(1);
KT_Bus_Write(0x1F, pilot_config);

pilot_config = KT_Bus_Read(0x1e);
KT_Bus_Write(0x1e, pilot_config|0x0010);
DelayUs(5*1000);
pilot_config = KT_Bus_Read(0x1e);
KT_Bus_Write(0x1e, pilot_config&~0x0010);


return 1;
}

microphone_enable(0);
DelayUs(100*1000);
microphone_enable(1);
DelayUs(300*1000);
}while(retry--);
log_info("microphone_pairing end");
return 0;
}

static bool is_microphone_hw_init = 0;
bool is_need_save_config = 0;
bool is_need_pa_stop = 0;
bool is_microphone_enabled = 0;

void KT_mic_config_t_print(mic_config_t mic_config)
{
log_debug("mic_config.flash_key = [0x%08x]", mic_config.flash_key);
log_debug("mic_config.freq = [%d]", mic_config.freq);
log_info("mic_config.PA_gain = [%d]", mic_config.PA_gain);
log_debug("mic_config.EQ_EN = [0x%02x]", mic_config.EQ_EN);
log_debug("mic_config.EQ[0] = [0x%02x]", mic_config.EQ[0]);
log_debug("mic_config.EQ[1] = [0x%02x]", mic_config.EQ[1]);
log_debug("mic_config.EQ[2] = [0x%02x]", mic_config.EQ[2]);
log_debug("mic_config.EQ[3] = [0x%02x]", mic_config.EQ[3]);
log_debug("mic_config.EQ[4] = [0x%02x]", mic_config.EQ[4]);
log_debug("mic_config.EQ[5] = [0x%02x]", mic_config.EQ[5]);
log_debug("mic_config.EQ[6] = [0x%02x]", mic_config.EQ[6]);
log_debug("mic_config.EQ[7] = [0x%02x]", mic_config.EQ[7]);
log_debug("mic_config.EQ[8] = [0x%02x]", mic_config.EQ[8]);
log_debug("mic_config.EQ[9] = [0x%02x]", mic_config.EQ[9]);
log_debug("mic_config.EQ[10] = [0x%02x]", mic_config.EQ[10]);
log_debug("mic_config.EQ[11] = [0x%02x]", mic_config.EQ[11]);
log_debug("mic_config.EQ[12] = [0x%02x]", mic_config.EQ[12]);
log_debug("mic_config.EQ[13] = [0x%02x]", mic_config.EQ[13]);
log_debug("mic_config.EQ[14] = [0x%02x]", mic_config.EQ[14]);
log_debug("mic_config.PILOT_EN = [0x%02x]", mic_config.PILOT_EN);

log_debug("mic_config.PILOT_DATA[0] = [0x%04x]", mic_config.PILOT_DATA[0]);
log_debug("mic_config.PILOT_DATA[1] = [0x%04x]", mic_config.PILOT_DATA[1]);
log_debug("mic_config.PILOT_DATA[2] = [0x%04x]", mic_config.PILOT_DATA[2]);
log_debug("mic_config.PILOT_DATA[3] = [0x%04x]", mic_config.PILOT_DATA[3]);
log_debug("mic_config.channel = [0x%02x]", mic_config.channel);
log_debug("mic_config.PA_state = [0x%02x]", mic_config.PA_state);
}

void KT0646_setchangeBattery()
{
u16 ret;
u16 device_id_reg27;
u8 falshbatt =0;
u8 battchang =0;
device_id_reg27 = KT_Bus_Read(0x27);

falshbatt =((device_id_reg27) & 0xFF);


if (battchang >=2 )
{
KT_WirelessMicTx_PASW(1);
ret = KT_Bus_Read(0x1f);
KT_Bus_Write(0x27, ((((device_id_reg27) >> 8) & 0xFF)<< 8) | (Battery_Vdet/100));
mic_config.PILOT_DATA[3] = ((((device_id_reg27) >> 8) & 0xFF)<< 8) | (Battery_Vdet/100);


KT_Bus_Write(0x20,(0x13 << 8) | 0x12);
KT_Bus_Write(0x21,(0x27 << 8) | 0x14);

KT_Bus_Write(0x1f,(ret&0x80f0)|(1 << 14)|(3 << 12) |
(3 << 9)|1);

}
}

void KT0646_setchangekey(u8 key)
{
u16 ret;
u16 device_id_reg27;
u8 falshkey =0;
device_id_reg27 = KT_Bus_Read(0x27);

falshkey = (((device_id_reg27) >> 8) & 0xFF);
log_debug("read  aux_reserved_reg4 reg27=[0x%04x] falshkey=[%d] key=[%d] \r\n",device_id_reg27,falshkey,key);
if (falshkey != key )
{
KT_WirelessMicTx_PASW(1);
ret = KT_Bus_Read(0x1f);
if (mic_config.flash_key == 0x55AA0103)
{
KT_Bus_Write(0x27, (key<< 8) | (((device_id_reg27) & 0xFF)));
mic_config.PILOT_DATA[3] = ((key<< 8) | (((device_id_reg27) & 0xFF)));

if (TestMode == 0)
{
if (SaveDataToFlash(&mic_config) )
{
log_info("MIC  device change key  Save Data  Success\n");
}
else
{
log_error("MIC  device change key  Save Data  fail\n");
}
}
KT_Bus_Write(0x20,(0x13 << 8) | 0x12);
KT_Bus_Write(0x21,(0x27 << 8) | 0x14);

KT_Bus_Write(0x1f,(ret&0x80f0)|(1 << 14)|(3 << 12) |
(3 << 9)|1);
}
}
}


void process_microphone()
{
u16 ret;
u16 device_id_reg12;
u16 device_id_reg13;
u16 device_id_reg14;
u16 device_id_reg27;
u32 number_random=0;
u8 current_channel=0;

extern int get_random();


channel_number = 0;
my_memset(&mic_config,'0',sizeof(mic_config_t));
if (TestMode == 1)
{
log_info("into test mode .....\n");
eraseToFlash();
mic_config.ch_power_count = get_random()%5;
}

if (ReadDataFromFlash())
{
KT_mic_config_t_print(mic_config);
log_info("Read Flash OK\n");
mic_config.ch_power_count ++;
}
else{
log_info("No Data in Flash!!!\n");
eraseToFlash();
mic_config.ch_power_count = get_random()%5;
log_error("Erase Flash OK\n");

}
microphone_enable(1);
ret=microphone_init();
if (ret == 0)
{
log_info("microphone_init fail  \r\n");
device_ERR_display();
return ;
}


if (mic_config.ch_power_count >95)
{
mic_config.ch_power_count = get_random()%5;
}
current_channel = 4;
log_info("mic_config.ch_power_count11111=[%d] current_channel=[%d]\r\n",mic_config.ch_power_count,current_channel);

if (mic_config.channel == current_channel)
{
if (mic_config.channel == ( 6 -1))
{
mic_config.channel =0;
}
else{
mic_config.channel= current_channel+1;
}
}
else{
mic_config.channel= current_channel;
}
mic_config.freq= UserRandomFreq[channel_number][mic_config.channel];
log_info("ble set mic  FREQMAXNUMBER=[%d] channel_number=[%d]  chanal=%d(%dKHz)\r\n" ,6, channel_number,mic_config.channel + 31 ,mic_config.freq);
if (TestMode == 0)
{
microphone_pairing_flag = microphone_pairing(mic_config.freq,mic_config.channel +31);
}
else{
if (channel_number == 0)
{
mic_config.freq=610000;
mic_config.channel=1;
microphone_pairing_flag=0;
log_debug("into a ch test mode  mic_config.freq=[%d] mic_config.channel=[%d] microphone_pairing_flag=[%d] \n", mic_config.freq,mic_config.channel,microphone_pairing_flag);
microphone_pairing_flag = microphone_pairing(mic_config.freq,mic_config.channel );
log_info("into a ch test mode  microphone_pairing_flag=[%d] \n", microphone_pairing_flag);
}
if (channel_number == 1)
{

mic_config.freq=621000;
mic_config.channel=1;
microphone_pairing_flag=0;
log_debug("into b ch test mode  mic_config.freq=[%d] mic_config.channel=[%d] microphone_pairing_flag=[%d] \n", mic_config.freq,mic_config.channel,microphone_pairing_flag);
microphone_pairing_flag = microphone_pairing(mic_config.freq,mic_config.channel );
log_debug("into b ch test mode  microphone_pairing_flag=[%d] \n", microphone_pairing_flag);
}
}

if (microphone_pairing_flag == 0)
{
log_info("microphone_pairing fail  \r\n");
device_ERR_display();
return ;
}

# 755
device_ch_displayF002(mic_config.channel +1 );

if (channel_number == 0){
channel_A_display(1);
channel_B_display(0);
}
else {
channel_A_display(0);
channel_B_display(1);
}


KT_WirelessMicTx_PASW(1);
ret = KT_Bus_Read(0x1f);
if (mic_config.flash_key == 0x55AA0103)
{
log_info("MIC  device Not the first pairing");
device_id_reg12 =mic_config.PILOT_DATA[0];

if (TestMode == 0)
{
device_id_reg13 = (0x88 << 8) | (mic_config.channel + 31 );
}else{
device_id_reg13 = (0x88 << 8) | (mic_config.channel + 31 );
}
device_id_reg14 = mic_config.PILOT_DATA[2];
device_id_reg27 = mic_config.PILOT_DATA[3];
}
else {
log_info(" MIC  device First pairing OK .....");
device_id_reg12 = (get_random()%255 << 8) | (get_random()%255);

if (TestMode == 0)
{
device_id_reg13 = (0x88 << 8) | (mic_config.channel + 31 );
}else{
device_id_reg13 = (0x88 << 8) | (mic_config.channel + 31 );
}
device_id_reg14= (get_random()%255) << 8 | (get_random()%255);
log_info("Battery_Vdet =[%umv]",Battery_Vdet);
device_id_reg27 = (0x0 << 8) | (Battery_Vdet/100);
}


KT_Bus_Write(0x12, device_id_reg12);
KT_Bus_Write(0x13, device_id_reg13);
KT_Bus_Write(0x14, device_id_reg14);
KT_Bus_Write(0x27, device_id_reg27);

mic_config.flash_key = 0x55AA0103;
mic_config.PILOT_DATA[0] = device_id_reg12;
mic_config.PILOT_DATA[1] = device_id_reg13;
mic_config.PILOT_DATA[2] = device_id_reg14;
mic_config.PILOT_DATA[3] = device_id_reg27;
KT_mic_config_t_print(mic_config);
if (TestMode == 0)
{
if (SaveDataToFlash(&mic_config) )
{
log_info("Save Data A Success\n");
}
else
{
log_error("Save Data A fail\n");
}

}
KT_Bus_Write(0x20,(0x13 << 8) | 0x12);
KT_Bus_Write(0x21,(0x27 << 8) | 0x14);

KT_Bus_Write(0x1f,(ret&0x80f0)|(1 << 14)|(3 << 12) |
(3 << 9)|1);
KT_WirelessMicTx_MuteSel(0);
KT_WirelessMicTx_Read_Mic_Sens();

# 842
}

void microphone_enable(bool enable)
{

# 857
}
